@page "/claims"
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<h3>User Claims Management</h3>

@if (allUsers == null)
{
    <p><em>Loading users...</em></p>
}
else
{
    <div class="mb-3">
        <label>Select User:</label>
        <select class="form-select" @onchange="OnUserSelected">
            <option value="">-- Select a user --</option>
            @foreach (var user in allUsers)
            {
                <option value="@user.Id">@user.Email</option>
            }
        </select>
    </div>

    @if (selectedUser != null)
    {
        <div class="mb-3">
            <label>Claim Type:</label>
            <InputText @bind-Value="claimType" class="form-control" placeholder="e.g., CanEdit" />
        </div>

        <div class="mb-3">
            <label>Claim Value:</label>
            <InputText @bind-Value="claimValue" class="form-control" placeholder="e.g., true" />
        </div>

        <button class="btn btn-primary mb-3" @onclick="AddClaim">Add Claim</button>

        @if (userClaims.Any())
        {
            <h5>Current Claims:</h5>
            <ul class="list-group">
                @foreach (var claim in userClaims)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @claim.Type: @claim.Value
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveClaim(claim)">Remove</button>
                    </li>
                }
            </ul>
        }
    }
}

@code {
    private List<ApplicationUser> allUsers;
    private ApplicationUser selectedUser;
    private List<Claim> userClaims = new();
    private string selectedUserId;
    private string claimType = "";
    private string claimValue = "";

    protected override async Task OnInitializedAsync()
    {
        allUsers = (await UserManager.Users.ToListAsync());
    }

    private async Task OnUserSelected(ChangeEventArgs e)
    {
        selectedUserId = e.Value?.ToString();
        selectedUser = await UserManager.FindByIdAsync(selectedUserId);

        if (selectedUser != null)
        {
            await LoadUserClaims(selectedUser);
        }
        else
        {
            userClaims.Clear();
        }
    }

    private async Task LoadUserClaims(ApplicationUser user)
    {
        userClaims = (await UserManager.GetClaimsAsync(user)).ToList();
        StateHasChanged();
    }

    private async Task AddClaim()
    {
        if (selectedUser != null && !string.IsNullOrWhiteSpace(claimType) && !string.IsNullOrWhiteSpace(claimValue))
        {
            var result = await UserManager.AddClaimAsync(selectedUser, new Claim(claimType, claimValue));
            if (result.Succeeded)
            {
                await LoadUserClaims(selectedUser);
                claimType = "";
                claimValue = "";
            }
        }
    }

    private async Task RemoveClaim(Claim claim)
    {
        if (selectedUser != null)
        {
            var result = await UserManager.RemoveClaimAsync(selectedUser, claim);
            if (result.Succeeded)
            {
                await LoadUserClaims(selectedUser);
            }
        }
    }
}
